# ### Auto build Box64 and release its binary with Github Action
# This workflow focuses on building Box64 for Android, specifically
# generating the .rat package for MiceWine, including variations
# for SD888 and SD845 SoCs.
# NOTE: Automatic builds on push commits have been disabled.

name: Build and Release Box64 (MiceWine Focus)

on:
  workflow_dispatch: # Allow manual triggering
  release: # Trigger on new release creation
    types: [published]
  # The 'push' trigger has been removed to prevent builds on commit
  # push:
  #   paths: # Trigger on changes to source files or this workflow
  #     - "**/ *.c"
  #     - "**/ *.h"
  #     - "**/ *.S"
  #     - "**/ *.py"
  #     - "CMakeLists.txt"
  #     - ".github/workflows/**.yml"
  pull_request:
    types: [assigned, opened, synchronize, reopened]
    paths:
      - "**/ *.c"
      - "**/ *.h"
      - "**/ *.S"
      - "**/ *.py"
      - "CMakeLists.txt"
      - ".github/workflows/**.yml"

jobs:
  build:
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        # Only build for ANDROID platform now
        platform: [ANDROID]
        # Only build Release and Trace types (needed for .rat)
        type: [Release, Trace]
        # Define SoC targets: 'default' for standard build, plus specific SoCs
        soc: [default, SD888, SD845]
        # Android builds run on ubuntu-latest based on original exclude rules
        os: [ubuntu-latest]
        # No exclusions needed with this simplified matrix

    runs-on: ${{ matrix.os }} # Use the OS defined in the matrix

    steps:
      - name: "Checkout Box64 Repository"
        uses: actions/checkout@v4
        with:
          # Fetch all history for version calculation if needed (optional)
          fetch-depth: 0

      - name: "Environment preparation for ANDROID"
        # This step sets up the Android NDK and necessary tools
        run: |
          sudo apt-get update
          sudo apt-get -y install git cmake make python3 p7zip patchelf

          # Download and extract Android NDK
          wget -q https://dl.google.com/android/repository/android-ndk-r26b-linux.zip
          unzip -qq android-ndk-r26b-linux.zip

          # Set environment variables for the NDK compiler and platform flags
          echo "BOX64_COMPILER=$PWD/android-ndk-r26b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang" >> $GITHUB_ENV
          # Base flags for Android platform
          echo "BOX64_PLATFORM_MARCRO=-DANDROID=1 -DARM_DYNAREC=1 -DBAD_SIGNAL=1" >> $GITHUB_ENV

          # Clone termux-docker to get system libraries (as per original workflow for Android)
          # Note: Ensure this step is actually required for your non-Termux Android build
          git clone https://github.com/termux/termux-docker.git
          sudo cp -rf termux-docker/system/arm /system
          sudo chown -R $(whoami):$(whoami) /system
          sudo chmod 755 -R /system

          # Set TERMUX flag to 0 as this is not a Termux build
          echo "IS_TERMUX=0" >> $GITHUB_ENV

      - name: "Set Build Type Flags"
        # Sets CMake flags based on the build type (Release/Trace)
        run: |
          if [[ "${{ matrix.type }}" == 'Release' ]]; then
            echo BOX64_BUILD_TYPE=Release >> $GITHUB_ENV
            echo BOX64_HAVE_TRACE=0 >> $GITHUB_ENV
            echo BOX64_STATICBUILD=0 >> $GITHUB_ENV # StaticBuild not used
            echo BOX64_BOX32=0 >> $GITHUB_ENV # Box32 not used
          else # Trace build
            echo BOX64_BUILD_TYPE=RelWithDebInfo >> $GITHUB_ENV # Use RelWithDebInfo for Trace
            echo BOX64_HAVE_TRACE=1 >> $GITHUB_ENV
            echo BOX64_STATICBUILD=0 >> $GITHUB_ENV
            echo BOX64_BOX32=0 >> $GITHUB_ENV
          fi

      - name: "Set SoC Flag"
        # Sets the specific SoC CMake flag if not 'default'
        run: |
          if [[ "${{ matrix.soc }}" != "default" ]]; then
            echo "BOX64_SOC_FLAG=-D${{ matrix.soc }}=1" >> $GITHUB_ENV
            echo "SOC_SUFFIX=${{ matrix.soc }}-" >> $GITHUB_ENV # Suffix for artifact name
          else
            echo "BOX64_SOC_FLAG=" >> $GITHUB_ENV # No extra flag for default
            echo "SOC_SUFFIX=" >> $GITHUB_ENV # No suffix for default
          fi

      - name: "Display Build info"
        # Log the configuration being built
        run: |
          echo "Platform: ${{ matrix.platform }}"
          echo "Type: ${{ matrix.type }}"
          echo "SoC Target: ${{ matrix.soc }}"
          echo "OS: ${{ matrix.os }}"
          echo "--- CMake Flags ---"
          echo "Platform Macro: ${{ env.BOX64_PLATFORM_MARCRO }}"
          echo "SoC Flag: ${{ env.BOX64_SOC_FLAG }}"
          echo "Compiler: ${{ env.BOX64_COMPILER }}"
          echo "Build Type: ${{ env.BOX64_BUILD_TYPE }}"
          echo "Trace Enabled: ${{ env.BOX64_HAVE_TRACE }}"
          echo "StaticBuild Enabled: ${{ env.BOX64_STATICBUILD }}"
          echo "Box32 Enabled: ${{ env.BOX64_BOX32 }}"
          echo "Termux Build: ${{ env.IS_TERMUX }}"
          echo "CI Flag: false (Android)"

      - name: "Build Box64"
        # Run CMake and Make to build the executable
        run: |
          mkdir build
          cd build
          # Construct the CMake command with all flags
          cmake .. -DCMAKE_C_COMPILER=${{ env.BOX64_COMPILER }} \
                   -DTERMUX=${{ env.IS_TERMUX }} \
                   ${{ env.BOX64_PLATFORM_MARCRO }} \
                   ${{ env.BOX64_SOC_FLAG }} \
                   -DCMAKE_BUILD_TYPE=${{ env.BOX64_BUILD_TYPE }} \
                   -DHAVE_TRACE=${{ env.BOX64_HAVE_TRACE }} \
                   -DSTATICBUILD=${{ env.BOX64_STATICBUILD }} \
                   -DBOX32=${{ env.BOX64_BOX32 }} \
                   -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
                   -DCI=false # CI flag is false for Android builds
          # Build using all available processor cores
          make -j$(nproc) VERBOSE=1

      - name: "Test Box64 (Android)"
        # Run tests using QEMU for the Android build
        run: |
          # Install QEMU static user emulator for aarch64
          mkdir qemu9
          wget -O- -q https://archive.archlinux.org/packages/q/qemu-user-static/qemu-user-static-9.0.2-1-x86_64.pkg.tar.zst | tar -I zstd -C qemu9 -xf -
          sudo cp qemu9/usr/bin/qemu-aarch64-static /usr/bin/

          cd build
          # Set QEMU environment variables for Android libraries
          export INTERPRETER=qemu-aarch64-static
          export QEMU_LD_PREFIX=/system/lib64 # Path to Android libs copied earlier

          # Set CTest options
          export CTEST_OPTIONS="-j$(nproc) --timeout 120 --output-on-failure --repeat until-pass:20"

          # Run tests with Dynarec OFF first
          BOX64_DYNAREC=0 ctest $CTEST_OPTIONS
          # Run tests with Dynarec ON (default)
          ctest $CTEST_OPTIONS

      - name: "Get short Git commit"
        # Get the short commit hash for artifact naming
        id: git-info
        run: echo "SHORT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: "Get Box64 Version"
        # Extract Box64 version from header file
        run: echo "BOX64_VERSION=$(cat src/box64version.h | grep BOX64_MAJOR | cut -d " " -f 3).$(cat src/box64version.h | grep BOX64_MINOR | cut -d " " -f 3).$(cat src/box64version.h | grep BOX64_REVISION | cut -d " " -f 3)" >> $GITHUB_ENV

      - name: "Package Rat File for MiceWine"
        # This step creates the .rat package if the build type is Release or Trace
        # The condition `matrix.type != 'StaticBuild'` is always true now, but kept for clarity
        if: matrix.platform == 'ANDROID' && matrix.type != 'StaticBuild'
        run: |
          cd build
          # Create directory structure for the package
          mkdir -p files/usr/bin
          # Copy the built executable
          cp box64 files/usr/bin

          # Create the package header file
          echo "name=Box64 (CI Build - ${{ env.SOC_SUFFIX }}${{ matrix.type }})" > pkg-header
          echo "category=Box64" >> pkg-header
          echo "version=${{ env.BOX64_VERSION }}-${{ env.SHORT_COMMIT }}" >> pkg-header
          echo "architecture=aarch64" >> pkg-header
          echo "vkDriverLib=" >> pkg-header # Placeholder for Vulkan driver if needed

          # Create the .rat file (zip archive)
          7z -tzip -mx=5 a box64-${{ env.SOC_SUFFIX }}${{ matrix.type }}.rat files pkg-header

      - name: "Upload Box64 Executable Artifact"
        # Upload the raw executable as a separate artifact
        uses: actions/upload-artifact@v4
        with:
          # Name includes SoC target and build type
          name: box64-${{ matrix.platform }}-${{ env.SOC_SUFFIX }}${{ matrix.type }}
          path: build/box64

      - name: "Upload Rat File Artifact"
        # Upload the generated .rat file for MiceWine
        # Condition ensures this only runs for Android Release/Trace builds
        if: matrix.platform == 'ANDROID' && matrix.type != 'StaticBuild'
        uses: actions/upload-artifact@v4
        with:
          # Name includes SoC target and build type
          name: box64-MiceWine-${{ env.SOC_SUFFIX }}${{ matrix.type }}
          path: build/box64-${{ env.SOC_SUFFIX }}${{ matrix.type }}.rat

